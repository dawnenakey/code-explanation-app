import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { 
  Code, 
  Lightbulb, 
  Copy, 
  Trash2, 
  Brain, 
  GraduationCap, 
  FileCode,
  Info,
  Clock,
  Check,
  TriangleAlert,
  RefreshCw,
  Loader2
} from "lucide-react";

interface CodeExplanationResult {
  explanation: string;
  detectedLanguage: string;
  keyPoints: string[];
  stepByStep: Array<{
    step: string;
    description: string;
    color: string;
  }>;
  concepts: Array<{
    name: string;
    description: string;
  }>;
  performanceNotes?: string;
  optimizationSuggestions?: Array<{
    issue: string;
    solution: string;
    example: string;
  }>;
  complexityAnalysis?: {
    timeComplexity: string;
    spaceComplexity: string;
    analysis: string;
  };
  responseTime: number;
}

const languages = [
  { value: "auto", label: "Auto-detect" },
  { value: "javascript", label: "JavaScript" },
  { value: "typescript", label: "TypeScript" },
  { value: "java", label: "Java" },
  { value: "angular", label: "Angular" },
  { value: "react", label: "React" },
  { value: "spring", label: "Spring Boot" },
  { value: "python", label: "Python" },
  { value: "csharp", label: "C#" },
  { value: "sql", label: "SQL" },
  { value: "json", label: "JSON" },
  { value: "xml", label: "XML" },
];

const colorMap = {
  blue: "bg-blue-50 border-l-4 border-blue-400",
  green: "bg-green-50 border-l-4 border-green-400",
  purple: "bg-purple-50 border-l-4 border-purple-400",
  orange: "bg-orange-50 border-l-4 border-orange-400",
  red: "bg-red-50 border-l-4 border-red-400",
  yellow: "bg-yellow-50 border-l-4 border-yellow-400",
};

export default function Home() {
  const [codeInput, setCodeInput] = useState("");
  const [selectedLanguage, setSelectedLanguage] = useState("auto");
  const [explanation, setExplanation] = useState<CodeExplanationResult | null>(null);
  const { toast } = useToast();

  const explainCodeMutation = useMutation({
    mutationFn: async (data: { code: string; language: string }) => {
      const response = await apiRequest("POST", "/api/explain-code", data);
      return response.json();
    },
    onSuccess: (data: CodeExplanationResult) => {
      setExplanation(data);
      toast({
        title: "Code explained successfully!",
        description: `Analysis completed in ${data.responseTime.toFixed(1)}s`,
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to explain code",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const handleExplainCode = () => {
    if (!codeInput.trim()) {
      toast({
        title: "No code provided",
        description: "Please paste some code to analyze",
        variant: "destructive",
      });
      return;
    }

    if (codeInput.length > 10000) {
      toast({
        title: "Code too long",
        description: "Please keep your code under 10,000 characters",
        variant: "destructive",
      });
      return;
    }

    explainCodeMutation.mutate({
      code: codeInput,
      language: selectedLanguage,
    });
  };

  const handleCopyExplanation = async () => {
    if (!explanation) return;

    try {
      const textToCopy = `# Code Explanation

## What This Code Does
${explanation.explanation}

## Key Points
${explanation.keyPoints.map(point => `• ${point}`).join('\n')}

## Step-by-Step Breakdown
${explanation.stepByStep.map(step => `${step.step}: ${step.description}`).join('\n')}

## Key Concepts
${explanation.concepts.map(concept => `• ${concept.name}: ${concept.description}`).join('\n')}

${explanation.performanceNotes ? `## Performance Notes\n${explanation.performanceNotes}` : ''}

---
Generated by CodeExplainer • Always verify for accuracy`;

      await navigator.clipboard.writeText(textToCopy);
      toast({
        title: "Copied to clipboard!",
        description: "The explanation has been copied to your clipboard",
      });
    } catch (error) {
      toast({
        title: "Copy failed",
        description: "Unable to copy to clipboard",
        variant: "destructive",
      });
    }
  };

  const handleClearInput = () => {
    setCodeInput("");
    setExplanation(null);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <Code className="text-primary text-2xl mr-3" />
              <h1 className="text-xl font-semibold text-gray-900">CodeExplainer</h1>
            </div>
            <div className="flex items-center space-x-4">
              <a href="/demo" className="text-sm text-blue-600 hover:text-blue-800 font-medium">
                Blue FCU Demo
              </a>
              <span className="text-sm text-gray-500">AI-Powered Code Analysis</span>
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Hero Section */}
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold text-gray-900 mb-4">Enterprise Code Analysis & Documentation</h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Transform legacy code into clear documentation. Perfect for code reviews, onboarding new developers, 
            and understanding complex business logic in financial systems.
          </p>
          <div className="mt-4 flex items-center justify-center space-x-4 text-sm text-gray-500">
            <span className="flex items-center">
              <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
              Enterprise Ready
            </span>
            <span className="flex items-center">
              <div className="w-2 h-2 bg-blue-500 rounded-full mr-2"></div>
              Secure Processing
            </span>
            <span className="flex items-center">
              <div className="w-2 h-2 bg-purple-500 rounded-full mr-2"></div>
              Custom Integration
            </span>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Code Input Section */}
          <Card className="shadow-sm border border-gray-200">
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                  <FileCode className="text-primary mr-2" />
                  Code Input
                </h3>
                <div className="flex items-center space-x-3">
                  <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
                    <SelectTrigger className="w-32">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {languages.map((lang) => (
                        <SelectItem key={lang.value} value={lang.value}>
                          {lang.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={handleClearInput}
                    className="text-gray-500 hover:text-primary"
                  >
                    <Trash2 className="h-4 w-4 mr-1" />
                    Clear
                  </Button>
                </div>
              </div>
              
              <div className="relative">
                <Textarea
                  value={codeInput}
                  onChange={(e) => setCodeInput(e.target.value)}
                  placeholder="Paste your code here..."
                  className="min-h-80 font-mono text-sm bg-gray-50 resize-none"
                />
                <div className="absolute bottom-2 right-2 text-xs text-gray-400">
                  {codeInput.length} characters
                </div>
              </div>

              <div className="mt-4 flex justify-between items-center">
                <div className="flex items-center text-sm text-gray-500">
                  <Info className="h-4 w-4 mr-1" />
                  Supports snippets up to 10,000 characters
                </div>
                <Button 
                  onClick={handleExplainCode}
                  disabled={explainCodeMutation.isPending}
                  className="bg-primary hover:bg-primary/90"
                >
                  {explainCodeMutation.isPending ? (
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  ) : (
                    <Brain className="h-4 w-4 mr-2" />
                  )}
                  Explain Code
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Explanation Output Section */}
          <Card className="shadow-sm border border-gray-200">
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                  <Lightbulb className="text-yellow-500 mr-2" />
                  AI Explanation
                </h3>
                <div className="flex items-center space-x-3">
                  {explanation && (
                    <span className="text-sm text-gray-500 flex items-center">
                      <Code className="h-4 w-4 mr-1" />
                      {explanation.detectedLanguage}
                    </span>
                  )}
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={handleCopyExplanation}
                    disabled={!explanation}
                    className="text-gray-500 hover:text-primary"
                  >
                    <Copy className="h-4 w-4 mr-1" />
                    Copy
                  </Button>
                </div>
              </div>

              {/* Loading State */}
              {explainCodeMutation.isPending && (
                <div className="flex items-center justify-center h-80">
                  <div className="text-center">
                    <Loader2 className="h-8 w-8 animate-spin text-primary mx-auto mb-4" />
                    <p className="text-gray-500">Analyzing your code...</p>
                    <p className="text-sm text-gray-400 mt-2">This usually takes a few seconds</p>
                  </div>
                </div>
              )}

              {/* Error State */}
              {explainCodeMutation.isError && (
                <div className="flex items-center justify-center h-80">
                  <div className="text-center">
                    <TriangleAlert className="h-12 w-12 text-red-500 mx-auto mb-4" />
                    <p className="text-gray-900 font-medium mb-2">Analysis Failed</p>
                    <p className="text-sm text-gray-500 mb-4">
                      {explainCodeMutation.error?.message || "Unable to analyze the code. Please try again."}
                    </p>
                    <Button 
                      onClick={handleExplainCode}
                      variant="outline"
                      size="sm"
                    >
                      <RefreshCw className="h-4 w-4 mr-2" />
                      Try Again
                    </Button>
                  </div>
                </div>
              )}

              {/* Explanation Content */}
              {explanation && !explainCodeMutation.isPending && (
                <div className="space-y-6">
                  <div>
                    <h4 className="text-base font-semibold text-gray-900 mb-2">🎯 What This Code Does</h4>
                    <p className="text-gray-700 text-sm leading-relaxed">
                      {explanation.explanation}
                    </p>
                  </div>

                  {explanation.stepByStep.length > 0 && (
                    <div>
                      <h4 className="text-base font-semibold text-gray-900 mb-3">🔍 Step-by-Step Breakdown</h4>
                      <div className="space-y-3">
                        {explanation.stepByStep.map((step, index) => (
                          <div 
                            key={index} 
                            className={`p-3 rounded-r-md ${colorMap[step.color as keyof typeof colorMap] || 'bg-gray-50 border-l-4 border-gray-400'}`}
                          >
                            <p className="text-sm text-gray-700">
                              <strong>{step.step}:</strong> {step.description}
                            </p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {explanation.concepts.length > 0 && (
                    <div>
                      <h4 className="text-base font-semibold text-gray-900 mb-2">💡 Key Concepts</h4>
                      <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                        {explanation.concepts.map((concept, index) => (
                          <div key={index} className="bg-gray-50 p-3 rounded-md">
                            <p className="text-sm font-medium text-gray-900">{concept.name}</p>
                            <p className="text-xs text-gray-600">{concept.description}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {explanation.complexityAnalysis && (
                    <div>
                      <h4 className="text-base font-semibold text-gray-900 mb-2">📊 Complexity Analysis</h4>
                      <div className="bg-blue-50 border border-blue-200 p-3 rounded-md">
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 mb-2">
                          <div className="flex items-center">
                            <span className="text-sm font-medium text-gray-700">Time Complexity:</span>
                            <span className="ml-2 text-sm text-blue-700 font-mono">{explanation.complexityAnalysis.timeComplexity}</span>
                          </div>
                          <div className="flex items-center">
                            <span className="text-sm font-medium text-gray-700">Space Complexity:</span>
                            <span className="ml-2 text-sm text-blue-700 font-mono">{explanation.complexityAnalysis.spaceComplexity}</span>
                          </div>
                        </div>
                        <p className="text-sm text-gray-700">{explanation.complexityAnalysis.analysis}</p>
                      </div>
                    </div>
                  )}

                  {explanation.optimizationSuggestions && explanation.optimizationSuggestions.length > 0 && (
                    <div>
                      <h4 className="text-base font-semibold text-gray-900 mb-2">🚀 Optimization Suggestions</h4>
                      <div className="space-y-3">
                        {explanation.optimizationSuggestions.map((suggestion, index) => (
                          <div key={index} className="bg-green-50 border border-green-200 p-3 rounded-md">
                            <div className="mb-2">
                              <span className="text-sm font-medium text-red-700">Issue:</span>
                              <p className="text-sm text-gray-700 mt-1">{suggestion.issue}</p>
                            </div>
                            <div className="mb-2">
                              <span className="text-sm font-medium text-green-700">Solution:</span>
                              <p className="text-sm text-gray-700 mt-1">{suggestion.solution}</p>
                            </div>
                            <div>
                              <span className="text-sm font-medium text-blue-700">Example:</span>
                              <pre className="text-xs bg-gray-100 p-2 rounded mt-1 overflow-x-auto">
                                <code>{suggestion.example}</code>
                              </pre>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {explanation.performanceNotes && (
                    <div>
                      <h4 className="text-base font-semibold text-gray-900 mb-2">⚠️ Performance Notes</h4>
                      <div className="bg-yellow-50 border border-yellow-200 p-3 rounded-md">
                        <p className="text-sm text-gray-700">{explanation.performanceNotes}</p>
                      </div>
                    </div>
                  )}

                  <div className="border-t pt-4">
                    <div className="flex items-center justify-between text-xs text-gray-500">
                      <span>Generated by AI • Always verify for accuracy</span>
                      <span className="flex items-center">
                        <Clock className="h-3 w-3 mr-1" />
                        Response time: {explanation.responseTime.toFixed(1)}s
                      </span>
                    </div>
                  </div>
                </div>
              )}

              {/* Empty State */}
              {!explanation && !explainCodeMutation.isPending && !explainCodeMutation.isError && (
                <div className="flex items-center justify-center h-80">
                  <div className="text-center">
                    <Code className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                    <p className="text-gray-500 mb-2">No code to explain yet</p>
                    <p className="text-sm text-gray-400">Paste your code and click "Explain Code" to get started</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Features Section */}
        <div className="mt-16 bg-white rounded-lg shadow-sm border border-gray-200 p-8">
          <h3 className="text-xl font-semibold text-gray-900 mb-6 text-center">Why Choose CodeExplainer?</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center">
              <div className="bg-blue-100 w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-4">
                <Brain className="text-primary text-xl" />
              </div>
              <h4 className="font-semibold text-gray-900 mb-2">AI-Powered Analysis</h4>
              <p className="text-sm text-gray-600">Advanced language models provide accurate, contextual explanations</p>
            </div>
            <div className="text-center">
              <div className="bg-green-100 w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-4">
                <GraduationCap className="text-green-600 text-xl" />
              </div>
              <h4 className="font-semibold text-gray-900 mb-2">Beginner-Friendly</h4>
              <p className="text-sm text-gray-600">Clear explanations that anyone can understand, regardless of experience level</p>
            </div>
            <div className="text-center">
              <div className="bg-purple-100 w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-4">
                <Code className="text-purple-600 text-xl" />
              </div>
              <h4 className="font-semibold text-gray-900 mb-2">Multi-Language Support</h4>
              <p className="text-sm text-gray-600">Supports 12+ programming languages with automatic detection</p>
            </div>
          </div>
        </div>

        {/* Usage Tips */}
        <div className="mt-8 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6 border border-blue-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <Lightbulb className="text-yellow-500 mr-2" />
            Pro Tips
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-start">
              <Check className="text-green-500 mt-1 mr-2 h-4 w-4" />
              <p className="text-sm text-gray-700">Include comments in your code for more detailed explanations</p>
            </div>
            <div className="flex items-start">
              <Check className="text-green-500 mt-1 mr-2 h-4 w-4" />
              <p className="text-sm text-gray-700">Try different programming languages to see varied explanations</p>
            </div>
            <div className="flex items-start">
              <Check className="text-green-500 mt-1 mr-2 h-4 w-4" />
              <p className="text-sm text-gray-700">Use the copy feature to save explanations for later reference</p>
            </div>
            <div className="flex items-start">
              <Check className="text-green-500 mt-1 mr-2 h-4 w-4" />
              <p className="text-sm text-gray-700">Paste complex algorithms to understand their logic flow</p>
            </div>
          </div>
        </div>
      </main>

      {/* Footer */}
      <footer className="bg-white border-t border-gray-200 mt-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center mb-4 md:mb-0">
              <Code className="text-primary text-xl mr-2" />
              <span className="text-gray-600">CodeExplainer</span>
            </div>
            <div className="flex items-center space-x-6 text-sm text-gray-500">
              <span>Powered by OpenAI</span>
              <span>•</span>
              <a href="#" className="hover:text-primary transition-colors">Privacy Policy</a>
              <span>•</span>
              <a href="#" className="hover:text-primary transition-colors">Terms of Service</a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}
